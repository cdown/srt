#!/usr/bin/env python

"""Remove subtitles by index or timestamp."""

import srt
import datetime
import srt_tools.utils
import logging

log = logging.getLogger(__name__)

def parse_args():
    examples = {
        "Remove a single caption at index 10": "srt remove -i example.srt -t 10 11",
        "Remove captions within :05 - :08": "srt remove -i example.srt -t 00:00:5,00 00:00:8,00",
        "Remove captions from index 10 to the end of the file.": "srt remove -i example.srt -t 10",
        "Remove captions from :16 to the end of the file.": "srt remove -i example.srt -t 00:00:16,00",
        "Remove captions from index 2 to the 3rd to last index:": "srt remove -i example.srt -t 2 -3",
        "Remove captions from index 5 to timestamp :17": "srt remove -i example.srt -t 5 00:00:17,00",
        "Remove captions non-sequentially": "srt remove -i example.srt -t 24 6"
    }
    parser = srt_tools.utils.basic_parser(description=__doc__, examples=examples)
    parser.add_argument(
    "-t",
    metavar=("INDEX or TIMESTAMP"),
    nargs="+",
    required=True,
    help="The index (from 0) or timestamp to start or stop removing at."
    )
    return parser.parse_args()


def get_timestamp(subs, obj):
    """Parse an object for a datetime.timedelta"""
    if isinstance(obj, datetime.timedelta):
        return obj

    try:
        idx = int(obj)
        list_subs = subs if isinstance(subs, list) else list(subs)
        len_subs = len(list_subs)
        if (idx >= 0 and idx >= len_subs) or (idx < 0 and -idx > len_subs):
            raise IndexError("There is no caption at the specified index.")
        return list_subs[idx].start
    except ValueError:
        try:
            return srt.srt_timestamp_to_timedelta(obj)
        except srt.TimestampParseError:
            raise ValueError("You must enter a whole number index or timestamp (hh:mm:ss,ms) for caption arguments.")


def split(subs, timestamp):
    """
    Splits subtitles at a given timestamp.
    :rtype: :term:`generator` of :py:class:`Subtitle` objects
    """
    from types import GeneratorType
    subs = (x for x in subs) if not isinstance(subs, GeneratorType) else subs # ensures list compatibility
    split_subs = []
    idx = 1

    # yield unsplit captions before the timestamp
    break_subtitle = None
    for subtitle in subs:
        if subtitle.start < timestamp and timestamp < subtitle.end:
            yield srt.Subtitle(idx, subtitle.start, timestamp, subtitle.content)
            subtitle.start = timestamp
            split_subs.append(subtitle)
            idx += 1
        elif subtitle.start == timestamp:
            split_subs.append(subtitle)
        elif subtitle.start > timestamp:
            break_subtitle = subtitle
            break
        else:
            yield subtitle
            idx += 1

    # yield split captions (sort to adjust index first)
    split_subs.sort()
    for subtitle in split_subs:
        yield srt.Subtitle(idx, timestamp, subtitle.end, subtitle.content)
        idx += 1

    # yield unsplit captions after the timestamp
    if break_subtitle:
        yield srt.Subtitle(idx, break_subtitle.start, break_subtitle.end, break_subtitle.content)
        idx += 1

    for subtitle in subs:
        yield srt.Subtitle(idx, subtitle.start, subtitle.end, subtitle.content)
        idx += 1


def remove_caption_index(subs, index_one, index_two=0):
    """
    Removes captions from subtitles by index.
    When index one > index two, captions up to index two will be removed
    and captions after index one will be removed.

    :param int index_one: The inclusive index to remove from.
    :param int index_two: The exclusive index to remove to.
    :rtype: :term:`generator` of :py:class:`Subtitle` objects
    """
    subs = list(subs)
    len_subs = len(subs) # find length to allow for negative index via list
    subs = (x for x in subs)

    # check bounds
    index_one_positive = index_one >= 0
    index_two_positive = index_two >= 0
    if (len_subs == 0 or (index_one_positive and index_one >= len_subs)
        or (not index_one_positive and -index_one > len_subs)
        or (index_two_positive and index_two > len_subs)
        or (not index_two_positive and -index_two > len_subs + 1)):
        raise IndexError

    # convert index to positive equivalent
    index_one = index_one % len_subs if not index_one_positive and index_one != len_subs else index_one
    index_two = index_two % len_subs if not index_two_positive and index_two != len_subs else index_two

    # remove the captions
    if index_one == index_two:
        return

    idx = 1
    if index_one < index_two:
        for i in range(index_one):
            yield next(subs)
            idx += 1

        # remove captions after index one but before index two
        for i in range(index_one, index_two):
            next(subs)

        for subtitle in subs:
            yield srt.Subtitle(idx, subtitle.start, subtitle.end, subtitle.content)
            idx += 1
    else:
        # remove captions before index two
        for i in range(index_two):
            next(subs)

        for i in range(index_two, index_one):
            subtitle = next(subs)
            yield srt.Subtitle(idx, subtitle.start, subtitle.end, subtitle.content)
            idx += 1

        # remove captions after index one
        for subtitle in subs:
            pass


def remove_caption_timestamp(subs, timestamp_one, timestamp_two):
    """
    Removes captions from subtitles by timestamp.
    When timestamp one > timestamp two, captions up to index two will be removed
    and captions after index one will be removed.

    :param int index_one: The inclusive index to remove from.
    :param int index_two: The exclusive index to remove to.
    :rtype: :term:`generator` of :py:class:`Subtitle` objects
    """
    # ensures list compatibility
    from types import GeneratorType
    subs = (x for x in subs) if not isinstance(subs, GeneratorType) else subs

    # edge case
    sequential = timestamp_one < timestamp_two
    try:
        first_subtitle = next(subs)
    except StopIteration:
        return
    if timestamp_one == timestamp_two:
        return
    elif sequential and timestamp_two <= first_subtitle.start:
        yield first_subtitle
        yield from subs
        return
    elif not sequential and timestamp_one <= first_subtitle.start:
        return

    # Split the caption at the start and end of the block(s).
    subs = split(subs, timestamp_one)
    subs = split(subs, timestamp_two)

    # remove the captions
    idx = 1
    if timestamp_one < timestamp_two:
        if first_subtitle.start < timestamp_one:
            yield first_subtitle
            idx += 1
            for subtitle in subs:
                if timestamp_one <= subtitle.start:
                    break
                yield subtitle
                idx += 1

        # remove captions after timestamp one but before timestamp two
        for subtitle in subs:
            if timestamp_two <= subtitle.start:
                yield srt.Subtitle(idx, subtitle.start, subtitle.end, subtitle.content)
                idx += 1
                break

        for subtitle in subs:
            yield srt.Subtitle(idx, subtitle.start, subtitle.end, subtitle.content)
            idx += 1
    else:
        # remove captions before timestamp two
        if first_subtitle.start < timestamp_two:
            for subtitle in subs:
                if timestamp_two <= subtitle.start :
                    yield subtitle
                    idx += 1
                    break
        else:
            yield first_subtitle
            idx += 1

        for subtitle in subs:
            if timestamp_one <= subtitle.start:
                break
            yield srt.Subtitle(idx, subtitle.start, subtitle.end, subtitle.content)
            idx += 1

        # remove captions after timestamp one
        for subtitle in subs:
            pass


def main():
    args = parse_args()
    logging.basicConfig(level=args.log_level)
    srt_tools.utils.set_basic_args(args)

    subs = list(args.input)
    args.t[0] = get_timestamp(subs, args.t[0])
    if len(args.t) == 1:
        removed_subs = remove_caption_timestamp(subs, args.t[0])
    else:
        len_subs = len(subs)
        args.t[1] = len_subs if isinstance(args.t[1], int) and len_subs == args.t[1] else get_timestamp(subs, args.t[1])
        removed_subs = remove_caption_timestamp(subs, args.t[0], args.t[1])

    output = srt_tools.utils.compose_suggest_on_fail(removed_subs, strict=args.strict)

    try:
        args.output.write(output)
    except (UnicodeEncodeError, TypeError):  # Python 2 fallback
        args.output.write(output.encode(args.encoding))

if __name__ == "__main__":  # pragma: no cover
    main()
